
/*** Fireball Spell ***/
/*** Coded by:  Eerevann Tokani ***/
/*** Made an inheritable base file Taniwha 1995 ***/
/*
#define SP_NAME "fireball"
#define GP_COST 6
#define TYPE "fire"
#define SIZE_OF_DICE 6
#define save_type "spells"
int ADJ_COST;
*/
void hb_spell(object ob, mixed * params);
mixed find_unique_match(string find,mixed inx);
mixed find_one_match(string find,mixed inx);

string SP_NAME = "fireball";
int GP_COST = 6;
string TYPE = "fire";
int SIZE_OF_DICE =  6;
string save_type = "fire";
int ADJ_COST;
int maxlevel = 10;
string chant_message = "Majos areos pyros";

inherit "/std/spells/patch.c";

mixed spell(string str,int skill, int cast);
string help() {
       return
       "\n\n"
       "Spell Name: "+SP_NAME+"\n"
       "School: Invocation\n"
       "Level: 3rd\n"
       "Gp Cost: "+GP_COST+"\n"
       "Damage Type: "+TYPE+"\n"
       "Saving Throw: 1/2\n"
       "Description: \n"
       "     This spell envelopes a group of enemies in "+TYPE+
       "The damage caused is equal to the level of the caster *"+
       SIZE_OF_DICE+", with "
       "a maximum at level "+maxlevel+".\n";
}
int cast_spell(string str,object who,int cast)
{
    int skill;
    mixed ret,ob;
    object caster;
    if(who) caster = who;
    else caster = this_player();
    if ((int)caster->query_spell_effect("offensive"))
    {
        tell_object(caster,"You are already casting an offensive spell.\n");
        return 0;
    }
    ob = find_unique_match(str, environment(caster));
    caster->add_spell_effect(1, "offensive", SP_NAME, this_object(),
        "hb_spell", ({ skill,ob,cast }));
    if(! cast)
    {
        tell_object(caster,"You begin to cast "+SP_NAME+".\n");
        tell_room(environment(caster),caster->query_cap_name()+" begins casting an offensive spell.\n",
            caster);
    }
    return 1;
}
int hb_spell(object caster, mixed *params)
{
    int damage;
    string str;
    int NO_OF_DICE;
    int j;
    int i;
    NO_OF_DICE = caster->query_level();
    if(NO_OF_DICE == 0)
        NO_OF_DICE = 1;
    if (NO_OF_DICE > 10)
        NO_OF_DICE = 10;
  
    str = (string)caster->query_cap_name();
    /* to remove the caster, if he uses 'all' */
    if((i = member_array(caster, params[1])) != -1)
        params[1] = delete(params[1], i, 1);
  
    if(!sizeof(params[1]))
    {
        tell_object(caster, "There is noone here by that name.\n");
        return 0;
    }
   
    /* Specialists spend only half guild points to cast spells native to their
    * school, so GP_COST is checked and halved, if necessary.     */
  
    ADJ_COST = GP_COST;
  
    if( interactive(caster) )
    if((string)caster->query_guild_name() == "invoker")
        ADJ_COST = GP_COST/2;
      if( (int)caster->adjust_gp(-GP_COST) < 0)
    {
        tell_object(caster, "You are currently too "
            "mentally drained to cast.\n");
        return 0;
    }
    tell_room(environment(caster),str + " chants \""+chant_message+"\".\n", caster);
    tell_object(caster, "You chant \""+chant_message+"\".\n");
  
    i = 0;
    while(i<sizeof(params[1]))
    {
        if(params[1][i] && environment(params[1][i]) == environment(caster))
        {
            params[1][i]->attack_by(caster);
            damage = 0;
            for ( j=1 ; j<=NO_OF_DICE ; j++)  damage = damage + random(SIZE_OF_DICE);
            damage = wiz_fix_damage(caster,params[1][i],damage,save_type);
            params[1][i]->spell_damage(params[1][i],damage,TYPE,caster);
            tell_object(params[1][i], str + " envelopes you with a "+SP_NAME+"!\n");
            if(params[1][i]) i++;
            else params[1] = delete(params[1], i, 1);
        }
        else
        {
             params[1] = delete(params[1], i, 1);
        }
    }
    tell_room(environment(caster),str + " envelopes "+(str = query_multiple_short(params[1]))+
        " in a "+SP_NAME+"!\n", ({caster,params[1]}));
    tell_object(caster, "You envelope " + str + " in a "+SP_NAME+"!\n");
    return GP_COST;
}


