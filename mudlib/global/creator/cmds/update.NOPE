#include <standard.h>
#include <cmd.h>
inherit CMD_BASE;

void setup(){

position = 1;
}



static int do_update(object *ov) {
   string pname, dummy, err;
   int i, j;
   object *invent, rsv, env, dup, loaded;


   "room/void"->bingle_bingle();

   rsv = find_object("room/void");  /* RSV = Room Slash Void */
   if (!rsv) { /* Die in horror */
      notify_fail("The void is lost!\n");
      return 0;
    }

   for (i = 0; i < sizeof(ov); i++) {
      if (!ov[i]) continue;
      env = environment(ov[i]);
      invent = all_inventory(ov[i]);

      for (j = 0; j < sizeof(invent); j++)
         invent[j]->move(rsv);

      pname = file_name(ov[i]);
      if (sscanf(pname, "%s#%d", pname, dummy) != 2) { /* a room ? */
         ov[i] -> dest_me();
         if (ov[i]) ov[i]->dwep();
         if (ov[i]) destruct(ov[i]);
         file_size("/secure/master");
         if (!ov[i])
           ov[i] = find_object(pname);
         call_other(pname, "??");
         ov[i] = find_object(pname);
      } else {
         loaded = find_object(pname);
         if (loaded) loaded->dest_me();
         if (loaded) loaded->dwep();
         if (loaded) destruct(loaded);

         dup = clone_object(pname);
         if (dup && ov[i]) {
            ov[i] -> dest_me();
            if (ov[i]) ov[i]->dwep();
          if (ov[i]) destruct(ov[i]);
            ov[i] = dup;
         }
      }

     if (!ov[i]) {
        write("I seem to have lost your object.\n");
        return 1;
     }

   for (j = 0; j < sizeof(invent); j++)
        if (invent[j]) invent[j]->move(ov[i]);

     if (env) ov[i]->move(env);
     write("Updated " + this_player()->desc_f_object(ov[i]) + ".\n");
   }
   return 1;
} /* do_update() */

static int cmd(string str, object me) {
  string tring, *filenames, err;
  object ob, *val, *obs;
  int loop, loop2;

  notify_fail("No such object.\n");
  tring = str;
  if (!str || str == "here") {
    str = file_name(environment(this_player()));
    sscanf(str, "%s#%d", str, loop);
    filenames = ({ "/" + str });
    str = "here";
  }
  else {
    filenames = this_player()->get_cfiles(str);
  }
  if(sizeof(filenames) == 0) {
    val = this_player()->wiz_present(tring, this_player());
    if(!sizeof(val)) {
      notify_fail("No matching objects/filenames\n");
      return 0;
    }
    return do_update(val);
  }
  obs = ({ });
  for(loop = 0; loop < sizeof(filenames); loop++) {

    str = filenames[loop];
    ob = find_object(str);
    if (!ob) {
      if(file_size(str) >= 0) {
        if (!(err = catch(str->bing_with_me())))
          write("Loaded " + str + "\n");
        else
          write("Failed to load "+str+", error: "+err+"\n");
      }
     else {
        val = this_player()->wiz_present(tring, this_player());
        obs += val;
      }
    }
    else {
      obs += ({ ob });
    }
  }
  if (!obs)

  return 0;
  else
    return do_update(obs);
} /* update() */


