I'm working on a simple command handler to help reduce the player/creator
object size, and also ease the introduction of new commands.

What it basicly involves is an object for every command, and a small
routine to invoke it when the player types the command.

The way I have started it, you can have multiple
directories of commands, and the code will search for the command.

This enables you to, for instance, place all the code for
intermud commands in /net/cmds, all player commands in
/global/player/cmds and so on.

The obvious limitation is that these commands have _NO_ access to
variables within the player object. So things like combat still have to
be inside the real player/creator object.

Where it really helps is for commands that are either used quite
often, but need not be part of the player object, or commands hardly
ever used. It also helps for commands that would take a lot of
memory, and even more memory to be in every player object
loaded...

To overcome the problems of being slow searching for
commands, but without a static database of those commands,
the handler maintains a 'hashing mapping', where it keeps track
of where it found each command as it's requested.




There. What do you think? :)  I've sort-of converted 'ls' to work
with it. The code's in /global/cmd/* and the current search directories
are those I said above.. :)

I've not done anything to the player object yet, though. :)

Chrisy
