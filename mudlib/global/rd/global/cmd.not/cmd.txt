Command Handler.

Implementing a command with this handler is really
very simple.

You make an object with the code in, basicly.

To interface it to the handler, there are a few things you
have to do.

The object is of the form of:

#include "cmd.h"

  inherit CMD_BASE;

  void setup()
  {
    position = xx;
    doclone = yy;
    dodest = zz;
  }

  static int cmd(string tail)
  {

    // The code

    return aa;
  }

+ setup()

  position = xx;

  xx is one of:  0, CREATOR, LORD, HIGH_LORD
In Rd this will be CREATOR_CMD, LORD_CMD, HIGH_LORD_CMD, and a few others as specified in master.h
  0 is the DEFAULT, and means EVERYONE. Otherwise, only those
  of the specified LEVEL and above can use the command.

  doclone = yy;

  yy = 0 or 1.
  0 is the DEFAULT and means DON'T clone. Otherwise, the
  command is cloned before the code in it is executed.
  This is useful where objects need to be shared.
  NOTE:  If the 'cmd' code doesn't set 'doclone = 0' once the
  command is executed, as soon as 'cmd()' returns, the object
  is dested. If you use call_outs or input_to's, you must set
  the flag to 0, and dest the object YOURSELF. If the object
  doesn't get destructed, then there will be a wastage of memory till
  the object is cleaned up.

  dodest = zz;

  zz = 0 or 1.
  0 is the DEFAULT and means DON'T dest after use. Otherwise,
  the command will be destructed from memory after each
  invokation of the command. This should be used for commands
  which are used very infrequently, and thus would be wasteful
  to wait for the clean_up to destruct them.

+ cmd()

  cmd() contains the code for the command. The string passed
  as a parameter is the tail of the command the user/player entered.
  (if the player typed 'ls /open' the command would be ls, and the
  tail '/open').

  If cmd() returns the integer 1, then the command is assumed a
  success, and control is returned to the user. If the command
  returns 0, then control returns to the command handler in the
  player object (NOT THIS handler) to search for another command
  with the same action/verb.



The FILENAME of the object should be the same as the name of the command,
for example, the code for a 'write' command would be in 'write.c'.
The directory the command is in is important. Currently, these
are the command directories:

/global/player/cmds	For player commands
/global/creator/cmds	For creator commands
/global/lord/cmds		For lord commands
/net/cmds			For intermud network commands
/global/cmd/cmds		For command handler commands

Currently, there is no way to provide short forms of
commands (as there was when they were embedded. For instance,
pe and people were the same command). This is planned, however.

Also note, you should define the two function:

string query_usage()		Syntax of command
string query_short_help()		One-line description of command


11 August 1994
Chrisy@Aurora
