/*** Priest Darkness Spell ***/
inherit "/std/spells/patch.c";

/* find_unique_match() does a find match that ensures the returned 
   object list contains no duplicates
   find_one_match() returns only the first matched object
*/
mixed find_unique_match(string find,mixed inx);
mixed find_one_match(string find,mixed inx);
int cleric_fix_damage(object caster,object victim,int damage,string save);
object caster;
/*** Revised by: Eerevann ***/

/*** Summoning Sphere ***/
/*** level 1 ***/



#define GP_COST 5

mixed spell(string str, int skill, int cast);

string help() {
   return
   "\n\n"
   "Spell Name:  Darkness\n"
   "Sphere:  Summoning\n"
   "Level: 2nd\n"
  "Gp Cost: 2 (major) 4 (neutral) 5 (minor)\n"
   "Description: \n"
   "    This spell will create a small globe of darkness that is placed upon "
   "the target to help alleviate blinding light.  This spell must be cast on a "
   "target of some sort.\n"
	"    The spell has a limited duration.\n\n";
}

int cast_spell(string str,object cast)
{
 int skill;
 mixed ret;

 caster = cast ? cast : this_player();

 if(interactive(caster))
	 str = (string)caster->expand_nickname(str);

  if ( wrong_alignment(caster) )
    return punish_align(caster);

 ret = spell(str, skill, 1);
 if (stringp(ret))
 {
  notify_fail(ret);
  return 0;
 }
 tell_object(caster,"You begin to cast Darkness.\n");
 tell_room(environment(caster),caster->query_cap_name()+" begins to cast a spell.\n", ({ caster }) );
 return 1;
}

mixed spell(string str, int skill, int cast)
{
 mixed ob;
 if ((int) caster->query_spell_effect("misc"))
  return "You are already casting a miscelleanous spell.\n";

 ob = find_one_match(str, environment(caster));

 if(sizeof(ob))
  ob = ob[0];

 else
  ob = 0;

 caster->add_spell_effect(1, "misc", "Darkness", this_object(),
  "hb_spell", ({ skill,ob,cast }));

 return 1;
}

int hb_spell(object caster, mixed *params)
{
 int skill, darkness;
  int duration, cost;
 mixed who;


 if(!params[1])
 {
  tell_object(caster, "Your darkness spell fizzles since you "
   "can't see it's intended target.\n");
  return 0;
 }
  switch( caster->query_sphere_level("summoning") )
  {
    case "minor":  cost = 5;
    duration = caster->query_level()*5;
      break;
    case "neutral": cost = 4;
    duration = caster->query_level()*10;
      break;
    case "major": cost = 2;
    duration = caster->query_level()*20;
      break;
    default:  cost = 5;
    duration = caster->query_level()*5;
  }

 if(params[2] && (int)caster->adjust_gp(-cost)<0)
 {
  tell_object(caster, "Your mind is too weary to cast.\n");
  return 0;
 }

 if (params[1] == caster)
 {
  tell_object(caster, "Darkness envelops you.\n");
  tell_room(environment(caster),(string)caster->query_cap_name() +
   " raises a hand and is enveloped in sudden darkness.\n", params[1]);
 }

 else
 {
  tell_object(caster,"You cast a spell on "+
   (string)params[1]->query_cap_name()+", who is shrouded in darkness.\n");
  tell_room(environment(caster),(string)caster->query_cap_name()+ "mumbles something and "+
   (string)params[1]->query_cap_name()+" is shrouded with darkness.\n", params[1]);
  tell_object(params[1], (string)caster->query_cap_name()+
	" points at you and you are enveloped in darkness.\n");
 }

 params[1]->set_light(-60);
 call_out("wear_off", duration, params[1]);

 return GP_COST;
}

void wear_off(object target)
{
   if(target)
   {
 target->set_light(0);
 tell_object(target,"The darkness surrounding you disappears.\n");
 tell_room(environment(target),target->query_cap_name()+" is startled as the surrounding darkness lifts.\n",target);
   }
}
